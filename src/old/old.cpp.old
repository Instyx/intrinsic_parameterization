#include <igl/opengl/glfw/Viewer.h>
#include <igl/edge_lengths.h>
#include <igl/intrinsic_delaunay_triangulation.h>
#include <igl/read_triangle_mesh.h>
#include <igl/grad_intrinsic.h>


using Viewer = igl::opengl::glfw::Viewer;

Eigen::MatrixXd V;
Eigen::MatrixXi F,F_out;


bool load_mesh(std::string filename)
{
  igl::read_triangle_mesh(filename,V,F);
  return true;
}



bool callback_key_pressed(Viewer &viewer, unsigned char key, int modifiers) {
  viewer.data().clear();
  switch(key){
      case '1':
          viewer.data().set_mesh(V,F);
          std::cout << "1" << std::endl;
          break;
      case '2':
          viewer.data().set_mesh(V,F_out);
          std::cout << "2" << std::endl;
          break;
  }
  return true;

}
int main(int argc, char *argv[]) { 
 
  if(argc==2){
      load_mesh(argv[1]);      
  }
  else{
    std::cout << "no mesh" << std::endl;
    return 0;
  }
  Eigen::MatrixXd L,L_out,L_test;
  Eigen::SparseMatrix<double> G;
  igl::edge_lengths(V,F,L);
  //std::cout << L << std::endl;
  igl::intrinsic_delaunay_triangulation(L,F,L_out,F_out);
  igl::grad_intrinsic(L_out, F_out, G);
  


  //plot mesh
  Viewer viewer;
  viewer.callback_key_pressed = callback_key_pressed;
  viewer.data().set_mesh(V, F);
  viewer.data().set_face_based(true);
  viewer.launch();

  std::cout << "number of vertices: " << V.rows() << "; number of faces: " << F.rows() << std::endl;
  std::cout << "G dimensions: " << G.rows() << " x " << G.cols() << std::endl; 
}
