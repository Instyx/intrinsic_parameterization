#!/usr/bin/env python
import numpy as np
import meshio
import polyscope as ps
import polyscope.imgui as psim
import sys
import glob
from pathlib import Path


cblack = (0.0, 0.0, 0.0)
cA = (0.0, 0.149, 0.933)
cB = (0.989, 0.908, 0.0)
cC = (0.989, 0.149 , 0.908)

methods = ["dirichlet","asap","arap","symdirichlet"]
method = 0
flat = False
meshes = sorted(glob.glob(f"{output_folder}/*/"))

i = 0
if mesh:
    i = meshes.index(f"{output_folder}/{mesh}/")

mesh = None
try:
    mesh = sys.argv[1]
except:
    pass

method = 0
try:
    method = sys.argv[2]
except:
    pass

output_folder = "output"

ps.init()
#ps.load_blendable_material("myflat", ["../textures/texturered.png","../textures/texturegreen.png","../textures/texture.png","../textures/textureblack.png"]);
ps.set_ground_plane_mode("none");
ps.set_SSAA_factor(2)


def update_param():
    global ext_mesh, iparam_mesh, psmesh, paramesh, oldView
    if flat:
        ps.set_navigation_style("planar")
        psmesh.set_enabled(False)
        paramesh.set_enabled()
        if toggle:
            V = iparam_mesh.point_data["obj:vt"]
        else:
            V = ext_mesh.point_data["obj:vt"]
        F = ext_mesh.cells[0].data
        V -= V.mean(axis=0)
        V = V/max([V[:,0].max()-V[:,0].min(),V[:,1].max()-V[:,1].min()])
        # x = (V[:,0].max()-V[:,0].min())/2 + V[:,0].min()
        # y = (V[:,1].max()-V[:,1].min())/2 + V[:,1].min()
        paramesh = ps.register_surface_mesh("ParaMesh", V, F, material="clay", color=(152/255,152/255,152/255), edge_color=(0,0,0), edge_width=1);
    else:
        ps.set_navigation_style("turntable")
        paramesh.set_enabled(False)
        psmesh.set_enabled()

    if toggle:
        psmesh.add_parameterization_quantity("Intrinsic", iparam_mesh.point_data["obj:vt"], defined_on="vertices",
            coords_type="unit", viz_style="checker",checker_colors=(cblack, cA), checker_size=0.05, enabled=False)
        psmesh.add_parameterization_quantity("Normal", ext_mesh.point_data["obj:vt"], defined_on="vertices",
                                           coords_type="unit", viz_style="checker",checker_colors=(cblack, cB), checker_size=0.05, enabled=True)
    else:
        psmesh.add_parameterization_quantity("Normal", ext_mesh.point_data["obj:vt"], defined_on="vertices",
                                           coords_type="unit", viz_style="checker",checker_colors=(cblack, cB), checker_size=0.05, enabled=False)
        psmesh.add_parameterization_quantity("Intrinsic", iparam_mesh.point_data["obj:vt"], defined_on="vertices",
                                       coords_type="unit", viz_style="checker",checker_colors=(cblack, cA), checker_size=0.05, enabled=True)

def update_mesh():
    global i, method, methods
    id = Path(meshes[i]).stem
    print(id)
    print(methods[method])
    def add_mesh():
        global ext_mesh, iparam_mesh, psmesh
        ext_mesh = meshio.read(f"{output_folder}/{id}/{methods[method]}/{id}_ext.obj");
        iparam_mesh = meshio.read(f"{output_folder}/{id}/{methods[method]}/{id}_iparam.obj");
        # inbetween_meshes = [meshio.read(m) for m in sorted(glob.glob(f"{output_folder}/{id}/{methods[method]}/inbetween/*.obj"))]
        V = ext_mesh.points
        V -= V.mean(axis=0)
        V = V/max([V[:,0].max()-V[:,0].min(),V[:,1].max()-V[:,1].min()])
        F = ext_mesh.cells[0].data
        psmesh = ps.register_surface_mesh("Mesh", V, F, material="clay", color=(0,0,1), edge_color=(0,0,0), edge_width=0);

        # for i,m in enumerate(inbetween_meshes):
        #     psmesh.add_parameterization_quantity(f"Inbetween_{i}", m.point_data["obj:vt"], defined_on="vertices",
        #                                    coords_type="unit", viz_style="checker",checker_colors=(cblack, cC),checker_size=0.05, enabled=True)
    add_mesh()

toggle = True
def callback():
    global i, method, psmesh, toggle, flat, oldView
    if (psim.IsKeyPressed(ord("l")) or psim.IsKeyPressed(ord("L")) or psim.IsKeyPressed(ord("d")) or psim.IsKeyPressed(ord("D"))):
        i = (i+1)%len(meshes)
        update_mesh()
        update_param()
        ps.reset_camera_to_home_view()
    elif (psim.IsKeyPressed(ord("h")) or psim.IsKeyPressed(ord("H")) or psim.IsKeyPressed(ord("a"))or psim.IsKeyPressed(ord("A"))):
        i = (i-1)%len(meshes)
        update_mesh()
        update_param()
        ps.reset_camera_to_home_view()
    elif (psim.IsKeyPressed(ord("j")) or psim.IsKeyPressed(ord("J")) or psim.IsKeyPressed(ord("w")) or psim.IsKeyPressed(ord("W"))):
        method = (method+1)%len(methods)
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord("k")) or psim.IsKeyPressed(ord("K")) or psim.IsKeyPressed(ord("s")) or psim.IsKeyPressed(ord("S"))):
        method = (method-1)%len(methods)
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord("1"))):
        method = 0
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord("2"))):
        method = 1
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord("3"))):
        method = 2
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord("4"))):
        method = 3
        update_mesh()
        update_param()
    elif (psim.IsKeyPressed(ord(" "))):
        toggle = not toggle
        update_param()
    elif (psim.IsKeyPressed(ord("q")) or psim.IsKeyPressed(ord("Q"))):
        flat = not flat
        newView = ps.get_view_as_json()
        ps.set_view_from_json(oldView)
        oldView = newView
        update_param()
    else:
        return

oldView = ps.get_view_as_json()
update_mesh()
update_param()
ps.reset_camera_to_home_view()
oldView = ps.get_view_as_json()
ps.set_user_callback(callback)
ps.show();
